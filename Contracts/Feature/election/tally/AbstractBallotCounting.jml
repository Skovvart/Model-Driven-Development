 package election.tally;

/**
 * This is a Java Modeling Language (JML) design specification of the ballot 
 * counting algorithm for elections to Dail Eireann - the lower house of the 
 * National Parliament of Ireland.
 * 
 * @author Dermot Cochran
 * @copyright 2005-2011 Dermot Cochran
 * @reviewer Prof. Joseph R. Kiniry
 * 
 * This work was supported, in part, by Science Foundation Ireland
 * grant 03/CE2/I303_1 to Lero - the Irish Software Engineering
 * Research Centre (www.lero.ie) and by the European Project  Mobius IST 15909 
 * within the IST 6th Framework. This software reflects only the authors' views 
 * and the Community is not liable for any use that may be made of the 
 * information contained therein.
 * 
 * @see <a href="http://www.irishstatutebook.ie/1992_23.html">Part XIX of the 
 * Electoral Act, 1992</a>
 * @see Requirements for this specification are taken from 
 * <a href="http://www.cev.ie/htm/tenders/pdf/1_2.pdf">Department of 
 * Environment and Local Government, Commentary on Count 
 * Rules, sections 3-16, pages 12-65</a>
 * @see <a href="http://www.jmlspecs.org/">JML Homepage</a>
 */

public abstract class AbstractBallotCounting extends ElectionStatus {
  /** List of details for each candidate. 
   * @constraint There are no duplicates in the list of candidate IDs and, 
   * once the counting starts, there must be a ballot paper associated with 
   * each vote held by a candidate.
   */
  /*@ public invariant (PRECOUNT <= state) ==>
    @   \nonnullelements (candidateList); */
  /*@ public model Candidate[] candidateList;
    @
    @ public invariant (PRELOAD <= state) ==> 
    @   (totalCandidates == candidateList.length);*/
  
  /*@ public invariant (state == PRELOAD || state == LOADING) ==>
    @   (\forall int i; 0 <= i && i < totalCandidates;
    @     (candidateList[i].getStatus() == Candidate.CONTINUING) &&
    @     (candidateList[i].getTotalVote() == 0));*/
  
  /*@ public invariant (state == PRELOAD || state == LOADING ||   
    @   state == PRECOUNT || state == COUNTING || state == FINISHED) ==>
    @   (\forall int i, j; 0 <= i && i < totalCandidates && 
    @     i < j && j < totalCandidates;
    @     candidateList[i].getCandidateID() != 
    @     candidateList[j].getCandidateID());
    @
    @ protected invariant (state == COUNTING || state == FINISHED) ==> 
    @  (\forall int i; 0 <= i && i < totalCandidates;
    @    candidateList[i].getTotalAtCount() ==
    @    countBallotsFor (candidateList[i].getCandidateID()));
    @*/
	
  /** List of contents of each ballot paper that will be counted. */
  //@ public model non_null election.tally.Ballot[] ballotsToCount;
	
  /** Total number of candidates for election */
  /*@ public model int totalCandidates;
    @ public invariant 0 <= totalCandidates;
    @ public invariant (PRECOUNT <= state) ==> 
    @   totalCandidates <= candidateList.length;
    @ public invariant numberElected + numberEliminated <= totalCandidates;
    @*/

  /** Number of candidates elected so far */
  /*@ public model int numberElected;
    @ public invariant 0 <= numberElected;
    @ public invariant numberElected <= seats;
    @ public invariant (state <= PRECOUNT) ==> numberElected == 0;
    @ protected invariant (COUNTING <= state) ==> 
    @   numberElected == (\num_of int i; 0 <= i && i < totalCandidates;
    @   isElected(candidateList[i]));
    @ public invariant (state == FINISHED) ==> 
    @   numberElected == seats;
    @ public constraint \old(numberElected) <= numberElected;
    @*/

  /** Number of candidates excluded from election so far */
  /*@ public model int numberEliminated;
    @ public invariant 0 <= numberEliminated;
    @ public invariant (PRECOUNT <= state) ==>
    @   seats + numberEliminated <= totalCandidates;
    @ public invariant (state == COUNTING || state == FINISHED) ==> 
    @   (numberEliminated == (\num_of int i; 0 <= i && i < totalCandidates;
    @   candidateList[i].getStatus() == Candidate.ELIMINATED));
    @*/

  /** Number of seats to be filled in this election */
  //@ public model int seats;
  //@ public invariant 0 <= seats;
  //@ public invariant seats <= totalSeats;
  /*@ public constraint (PRELOAD < state) ==> 
    @   seats == \old (seats);
    @ public invariant (state == COUNTING) ==> (1 <= seats);
    @*/
	
  /** Total number of seats in this constituency
   * @design The constitution and laws of Ireland do not allow less than three or 
   *   more than five seats in each Dail constituency, but this could change in 
   *   future and is not an essential part of the specification.
   */
  //@ public model int totalSeats;
  //@ public invariant 0 <= totalSeats;
  /*@ public constraint (LOADING <= state) ==> 
    @   totalSeats == \old (totalSeats);
    @*/
	
  /** Total number of valid votes in this election count
   * @design There is a theoretical maximum number of votes because there
   *   must be at least one seat for every thirty thousand electors, and therefore
   *   a maximum of 150,000 votes in a five seater constituency, but this also 
   *   could change and is not an essential part of the specification.  The Java 
   *   primitive type <code>int</code> has a maximum value of over two billion
   *   which should be sufficient for anything less than a worldwide election.
   */
  /*@ public model int totalVotes;
    @ public invariant 0 <= totalVotes;
    @ public invariant (LOADING < state) ==> 
    @   (totalVotes == ballotsToCount.length);
    @ public invariant (state < LOADING) ==> totalVotes == 0;
    @ public constraint (state == LOADING) 
    @   ==> (\old (totalVotes) <= totalVotes);
    @ public constraint (LOADING < state) 
    @   ==> (totalVotes == \old (totalVotes));
    @*/

  /** Minimum number of votes needed to save deposit unless elected */
  //@ public model int depositSavingThreshold;
  //@ public invariant 0 <= depositSavingThreshold;
  //@ public invariant depositSavingThreshold <= totalVotes;
  /** @see requirement 6, section 3, item 3, page 13 */
  /*@ invariant (PRECOUNT < state) ==> 
    @   (depositSavingThreshold == ((getQuota() / 4) + 1)); */

  /** Number of rounds of counting so far */
  //@ public model int countNumber;
  //@ public initially countNumber == 0;
  //@ public invariant 0 <= countNumber;
  /*@ public invariant (PRELOAD <= state) ==>
    @   countNumber <= CountConfiguration.MAXCOUNT;
    @ public constraint (state == COUNTING) ==> 
    @   \old(countNumber) <= countNumber;
    @*/

  /** Number of seats which remain to be filled */
  //@ public model int remainingSeats; 
  //@ public invariant 0 <= remainingSeats;
  //@ public invariant remainingSeats <= seats;
  //@ public invariant (state <= PRECOUNT) ==> remainingSeats == seats;
  /*@ public invariant (state == FINISHED) ==> remainingSeats == 0;
    @ public invariant (state == COUNTING) ==> 
    @   remainingSeats == (seats - numberElected);
    @*/

   public AbstractBallotCounting();
	
  /** 
   * Determine if the candidate has received enough votes for election
   * 
   * @param candidate This candidate
   * @return True if the candidate has at least a quota of votes
   * @see "http://www.cev.ie/htm/tenders/pdf/1_1.pdf, page 79, paragraph 120 (2)"
   */
  /*@ ensures \result == 
    @   (countBallotsFor(candidate.getCandidateID()) >= getQuota());
    @*/
  public /*@ pure @*/ boolean hasQuota (election.tally.Candidate candidate);

	
  /** 
   * Determine if the candidate has been elected
   * 
   * @design It is possible for a candidate without having reached the quota
   *   to be elected in the final round of counting by virtue of being the
   *   highest continuing candidate when one seat remains.
   *   
   * @see requirement 4, section 13, item 3, page 13
   * 
   * 
   * <p> The quota is the minimum number of votes needed for election, except 
   * when any of the following shortcuts apply.
   * <ul>
   * <li>The number of continuing candidates is equal to the number of remaining
   * seats.
   * <li>The number of continuing candidates is one more than the number of 
   * remaining seats.
   * <li>There is one remaining seat.
   * </ul>
   * 
   * @see <a href="http://www.cev.ie/htm/tenders/pdf/1_1.pdf">
   * Department of Environment and Local Government, Electronic Vote Counting System, Appendix E</a>
   * @see <a href="http://www.cev.ie/htm/tenders/pdf/1_2.pdf">
   * Department of Environment and Local Government, Count Requirements and Commentary on Count Rules, sections 3-14</a>
   * @see <a href="http://www.irishstatutebook.ie/1992_23.html">
   * Sections 48, 118 and 124 of the Electoral Act, 1992</a>
   * 
   * @param candidate This candidate
   * @return True if the candidate has been elected
   */
  /*@ requires candidate != null;
    @ requires countNumber >= 1;
    @ requires state == COUNTING;
    @ ensures (\result == true) <==> 
    @     (candidate.getStatus() == Candidate.ELECTED || hasQuota(candidate));
    @*/
  public /*@ pure @*/ boolean isElected (election.tally.Candidate candidate);
	
	
  /** 
   * Determine how many surplus votes a candidate has.
   * 
   * The surplus is the maximum number of votes available for transfer
   * @see requirement 5, section 3, item 3, page 13
   *  
   * @param candidate The candidate record
   * @return The undistributed surplus for that candidate, or zero if the 
   * candidate has less than a quota of votes
   */
  public /*@ pure @*/ int getSurplus (election.tally.Candidate candidate);
	
  /** 
   * Determines if a candidate has saved his or her deposit.
   * 
   * @design The deposit saving threshold is one plus one quarter of the full 
   * quota.<p>
   *   It is possible for a candidate without the deposit saving threshold
   *   to be elected in the final round of counting by virtue of being the
   *   highest continuing candidate when one seat remains.  This could happen,
   *   for example, if the majority of ballots contained only first preferences.
   *   
   * @see requirement 7, section 13, item 3, page 13
   * 
   * @param candidate This candidate
   * @return <code>true</code> if candidate has had enough votes to save deposit 
   * or has been elected
   */
  /*@ requires (state == COUNTING) || (state == FINISHED);
    @ ensures \result <==> 
    @   (candidateList[index].getTotalVote() >= depositSavingThreshold) ||
    @   (isElected (candidateList[index]) == true);
    @*/
  public /*@ pure @*/ boolean isDepositSaved (int index);

	
  /** 
   * Distribution of surplus votes
   * 
   * @param candidateWithSurplus The candidate whose surplus is to be distributed
   * @design The highest surplus must be distributed if the total surplus 
   *   could save the deposit of a candidate or change the relative position 
   *   of the two lowest continuing candidates, or would be enough to elect the
   *   highest continuing candidate.
   * @see requirements 14-18, section 5, item 2, page 18
   * @see requirement 8, section 4, item 2, page 15
   */
  /*@ requires isElected (candidateList[candidateWithSurplus]) 
    @   && getSurplus (candidateList[candidateWithSurplus]) > 0;
    @ requires state == COUNTING;
    @ requires getNumberContinuing() > remainingSeats;
    @ ensures getSurplus (candidateList[candidateWithSurplus]) == 0;
    @*/
    public abstract void distributeSurplus(int candidateWithSurplus);

  /**
   * Set up candidate details and number of seats
   */
  /*@ requires state == EMPTY;
    @ ensures state == PRELOAD;
    @ ensures totalCandidates == constituency.getNumberOfCandidates();
    @ ensures seats == constituency.getNumberOfSeatsInThisElection();
    @ ensures totalSeats == constituency.getTotalNumberOfSeats();
    @*/
  public void setup (Constituency constituency);
	
	
  /** Loads all valid ballot papers.
   *  
   *  @param ballotBox The set of ballots for counting
   *  
   *  All ballot papers must be assigned to a valid candidate ID
   */
  /*@ requires state == PRELOAD;
    @ ensures state == PRECOUNT;
    @ ensures totalVotes == ballotBox.numberOfBallots;
    @ ensures (\forall int i; 0 <= i && i < totalVotes;
    @   (\exists int j; 0 <= j && j < totalCandidates;
    @      ballotsToCount[j].isAssignedTo(candidateList[i].getCandidateID())));
    @*/
  public void load(BallotBox ballotBox);
	
  /**
   * Count the votes.
   *
   * @design This is the method that starts the counting process.
   * @see requirement 1, section 3, item 2, page 12
   */
  /*@ public normal_behavior
    @   requires state == PRECOUNT || state == COUNTING;
    @   assignable state, countNumber, numberElected, remainingSeats, 
    @     candidateList, ballotsToCount;
    @   ensures remainingSeats == 0;
    @   ensures numberElected == seats;
    @   ensures state == FINISHED;
    @*/
  public abstract void count();
  
  /**
   * Get the status of the algorithm in progress
   */
  /*@ ensures \result == state;
    @
    @ public model pure byte getStatus();
    @*/
  
  /**
   * Gets the potential number of transfers from one candidate to another.
   * 
   * @design This method is needed to get the proportions to use when transfering
   * surplus votes.  If the candidate was elected on the first count then all
   * votes are examined, otherwise only the last set of votes received are examined.
   * 
   * @see requirement 19, section 7, item 2, page 23
   * 
   * @param fromCandidate Candidate ID from which to check the transfers
   * @param toCandidateID Candidate ID to check for receipt of transfered votes
   * @return Number of votes potentially transferable from this candidate to that
   *   candidate
   */
  /*@ ensures \result== (\num_of int j; 0 <= j && j < totalVotes;
    @   (ballotsToCount[j].isAssignedTo(fromCandidate.getCandidateID())) &&
    @   (getNextContinuingPreference(ballotsToCount[j]) == toCandidateID));
    @*/
  protected /*@ pure spec_public@*/ int getPotentialTransfers (
		  /*@ non_null @*/ Candidate fromCandidate, int toCandidateID);
  
  /**
   * Get the maximum number of votes transferable to continuing candidates.
   * 
   * @see requirement 20, section 7, item 2, page 24
   * 
   * @param fromCandidate Candidate from which to check the transfers
   * @return Number of votes potentially transferable from this candidate
   */
  //@ requires state == COUNTING;
  protected /*@ pure spec_public @*/ int getTotalTransferableVotes (
    /*@ non_null @*/ Candidate fromCandidate); 

  /*@ requires state == COUNTING;
    @ 
    @ public model pure int getSumOfTransfers(non_null Candidate fromCandidate) {
    @   int sum = 0;
    @   loop_invariant (0 < i) ==> (sum == (\sum int j; 0 <= j && j < i;
    @     getPotentialTransfers (fromCandidate, 
    @       candidateList[j].getCandidateID())));
    @   for (int i=0; i < totalCandidates; i++) {
    @     sum += getPotentialTransfers (fromCandidate,
    @       candidateList[i].getCandidateID());
    @   }
    @   return sum;
    @ }
    @*/
  
  /**
   * Gets the next preference continuing candidate.
   * 
   * This is the _nearest_ next preference i.e.
   * filter the list of preferences to contain continuing candidates and then
   * get the next preference to a continuing candidate, if any.
   * 
   * @param ballot Ballot paper from which to get the next preference
   * 
   * @return Candidate ID of next continuing candidate or NONTRANSFERABLE
   */
  /*@ requires state == COUNTING;
    @ ensures (\result == Ballot.NONTRANSFERABLE) ||
    @   (\exists int k; 1 <= k && k <= ballot.remainingPreferences(); 
    @     \result == ballot.getNextPreference(k));
    @ ensures (isContinuingCandidateID(\result)) || (\result == Ballot.NONTRANSFERABLE);
    @*/
  protected /*@ pure spec_public @*/ int getNextContinuingPreference(
		  /*@ non_null @*/ Ballot ballot);
  
  /**
   * Determine actual number of votes to transfer to this candidate, excluding
   * rounding up of fractional transfers
   * 
   * @see requirement 21, section 7, item 3.1, page 24
   * @see requirement 22, section 7, item 3.2, page 25
   * 
   * @design The votes in a surplus are transfered in proportion to
   *   the number of transfers available throughout the candidates ballot stack.
   *   If not all transferable votes are accounted for the highest remainders 
   *   for each continuing candidate need to be examined.
   * 
   * @param fromCandidate Candidate from which to count the transfers
   * @param toCandidate Continuing candidate eligible to receive votes
   * @return Number of votes to be transfered, excluding fractional transfers
   */
  /*@ requires state == COUNTING;
    @ requires isElected (fromCandidate) ||
    @   (fromCandidate.getStatus() == Candidate.ELIMINATED);
    @ requires toCandidate.getStatus() == Candidate.CONTINUING;
    @ ensures ((fromCandidate.getStatus() == Candidate.ELECTED) && 
    @   (getSurplus(fromCandidate) < getTotalTransferableVotes(fromCandidate)))
    @   ==>
    @   (\result == (getSurplus (fromCandidate) * 
    @               getPotentialTransfers (fromCandidate, toCandidate.getCandidateID()) /
    @               getTotalTransferableVotes (fromCandidate)));
    @ ensures ((fromCandidate.getStatus() == Candidate.ELIMINATED) ||
    @   (getTotalTransferableVotes(fromCandidate) <= getSurplus (fromCandidate)))
    @    ==>
    @   (\result == 
    @     (\num_of int j; 0 <= j && j < totalVotes;
    @     ballotsToCount[j].isAssignedTo(fromCandidate.getCandidateID()) &&
    @     getNextContinuingPreference(ballotsToCount[j]) == 
    @     toCandidate.getCandidateID()));
    @*/
  protected /*@ pure spec_public @*/ int getActualTransfers (
		  /*@ non_null @*/ Candidate fromCandidate, 
		  /*@ non_null @*/ Candidate toCandidate);
  
  /**
   * Determine the rounded value of a fractional transfer.
   * 
   * @design This depends on the shortfall and the relative size of the 
   * other fractional transfers.
   * 
   * @see requirements 23-25, section 7, item 3.2, page 25
   *
   * @param fromCandidate
   *        Elected candidate from which to distribute surplus
   *        
   * @param toCandidate
   *        Continuing candidate potentially eligible to receive transfers
   *        
   * @return <code>1</code> if the fractional vote is to be rounded up
   *         <code>0</code> if the fractional vote is to be rounded down
   */
  /*@ requires state == COUNTING;
    @ requires isElected (fromCandidate); 
    @ requires toCandidate.getStatus() == election.tally.Candidate.CONTINUING;
    @ requires getSurplus(fromCandidate) < 
    @   getTotalTransferableVotes(fromCandidate);
    @ ensures (getOrder (fromCandidate, toCandidate) <=
    @   getTransferShortfall (fromCandidate))
    @   ==> \result == 1;
    @ ensures (getOrder (fromCandidate, toCandidate) >
    @   getTransferShortfall (fromCandidate))
    @   ==> \result == 0;
    @*/
  protected /*@ pure spec_public @*/ int getRoundedFractionalValue (
		  /*@ non_null @*/ Candidate fromCandidate, 
		  /*@ non_null @*/ Candidate toCandidate);
  
  /**
   * Determine the number of continuing candidates with a higher remainder in
   * their transfer quotient, or deemed to have a higher remainder.
   * 
   * @design There must be a strict ordering of candidates for the purpose of
   * allocating the transfer shortfall.  If two or more candidates have equal
   * remainders then use the number of transfers they are about to receive and if 
   * the number of transfers are equal then look at the number of votes already
   * receieved.
   * 
   * @param fromCandidate
   *        Elected candidate from which to distribute surplus
   *        
   * @param toCandidate
   *        Continuing candidate potentially eligible to receive transfers
   *        
   * @return The number of continuing candidates with a higher quotient remainder
   *   than this candidate
   */
  /*@ requires state == COUNTING;
    @ requires isElected (fromCandidate); 
    @ requires toCandidate.getStatus() == CandidateStatus.CONTINUING;
    @ requires getSurplus(fromCandidate) < 
    @     getTotalTransferableVotes(fromCandidate);
    @ ensures \result == getCandidateRanking (fromCandidate, toCandidate);
    @*/
  protected /*@ pure spec_public @*/ int getOrder(
		  final /*@ non_null @*/ Candidate fromCandidate, 
		  final /*@ non_null @*/ Candidate toCandidate);
		  
 /*@ ensures \result == (\num_of int i; i <= 0 && i < totalCandidates &&
   @   candidateList[i].getCandidateID() != toCandidate.getCandidateID() &&
   @   candidateList[i].getStatus() == election.tally.Candidate.CONTINUING;
   @   (getTransferRemainder(fromCandidate, candidateList[i]) > 
   @      getTransferRemainder(fromCandidate, toCandidate)) ||
   @   ((getTransferRemainder(fromCandidate, candidateList[i]) == 
   @      getTransferRemainder(fromCandidate, toCandidate)) &&
   @   (getActualTransfers(fromCandidate, candidateList[i]) >
   @   getActualTransfers(fromCandidate, toCandidate))) ||
   @   ((((getTransferRemainder(fromCandidate, candidateList[i]) == 
   @      getTransferRemainder(fromCandidate, toCandidate)) &&
   @   (getActualTransfers(fromCandidate, candidateList[i]) ==
   @   getActualTransfers(fromCandidate, toCandidate)))) &&
   @   isHigherThan (candidateList[i], toCandidate)));
   @
   @ public pure model int getCandidateRanking (
   @    Candidate fromCandidate, Candidate toCandidate) {
   @    int counter = 0;
   @	for (int i=0; i < totalCandidates; i++) {
   @        if (candidateList[i].getCandidateID() != 
   @           toCandidate.getCandidateID() &&
   @   candidateList[i].getStatus() == election.tally.Candidate.CONTINUING &&
   @   ((getTransferRemainder(fromCandidate, candidateList[i]) > 
   @      getTransferRemainder(fromCandidate, toCandidate)) ||
   @   ((getTransferRemainder(fromCandidate, candidateList[i]) == 
   @      getTransferRemainder(fromCandidate, toCandidate)) &&
   @   (getActualTransfers(fromCandidate, candidateList[i]) >
   @   getActualTransfers(fromCandidate, toCandidate))) ||
   @   ((((getTransferRemainder(fromCandidate, candidateList[i]) == 
   @      getTransferRemainder(fromCandidate, toCandidate)) &&
   @   (getActualTransfers(fromCandidate, candidateList[i]) ==
   @   getActualTransfers(fromCandidate, toCandidate)))) &&
   @   isHigherThan (candidateList[i], toCandidate)))) {
   @            counter++;
   @        }
   @    }
   @    return counter;
   @ }
   @*/
  
  /**
   * Determine if one continuing candidate is higher than another, for the purpose
   * of resolving remainders of transfer quotients.
   * 
   * @design This is determined by finding the earliest round of counting in which
   * these candidates had unequal votes.  If both candidates are equal at all counts
   * then random numbers are used to draw lots.
   * 
   * @see <a href="http://www.cev.ie/htm/tenders/pdf/1_2.pdf">Department of 
   * Environment and Local Government, Count Requirements and  Commentary on Count 
   * Rules, section 7, page 25</a>
   * 
   * @param firstCandidate
   *        The first of the two candidates to be compared
   * 
   * @param secondCandidate
   *        The second of the two candidates to be compared
   * 
   * @return <code>true</code> if first candidate is deemed to have received more
   *   votes than the second.
   */
  /*@ requires firstCandidate.getStatus() == Candidate.CONTINUING;
    @ requires secondCandidate.getStatus() == Candidate.CONTINUING;
    @ ensures \result == (\exists int i; 0 <= i && i <= countNumber;
    @   (firstCandidate.getVoteAtCount(i) > secondCandidate.getVoteAtCount(i)) 
    @   && 
    @   (\forall int j; i < j && j <= countNumber;
    @     firstCandidate.getVoteAtCount(j) 
    @     == secondCandidate.getVoteAtCount(j))) 
    @     ||
    @     ((randomSelection (firstCandidate, secondCandidate) == 
    @     firstCandidate.getCandidateID()) 
    @     && 
    @     (\forall int k; 0 <= k && k <= countNumber;
    @       firstCandidate.getVoteAtCount(k) 
    @       == secondCandidate.getVoteAtCount(k)));
    @*/
  protected /*@ pure spec_public @*/ boolean isHigherThan (
    /*@ non_null @*/ Candidate firstCandidate,
    /*@ non_null @*/ Candidate secondCandidate);
  
  /**
   * Draw lots to choose between two continuing candidates.
   * 
   * @design The offical guidelines suggest that the returning officer 
   * be asked to draw lots each time a random selection is required.  This
   * is simulated by having random numbers assigned to the candidates, so that
   * process of drawing lots is repeatable for testing purposes. <p> 
   * This means that
   * the count results are deterministic for any given set of random numbers.
   * <p>
   * Where fractional transfers are possible then there should be less need for
   * this, especially when second and subsequent preferences are used in the
   * even that two candidates receive an equal number of first preferences.
   * 
   * @param firstCandidate
   *        The first of the two candidates to be compared
   * 
   * @param secondCandidate
   *        The second of the two candidates to be compared
   *        
   * @return The candidate ID of the chosen candidate
   */
  /*@ ensures (\result == firstCandidate.candidateID) <==>
    @   (firstCandidate.isAfter(secondCandidate)
    @   || firstCandidate.sameAs(secondCandidate));
    @ ensures (\result == secondCandidate.candidateID) <==>
    @   (secondCandidate.isAfter(firstCandidate)
    @   || secondCandidate.sameAs(firstCandidate));
    @
  public model pure int randomSelection (
		  non_null Candidate firstCandidate,
		  non_null Candidate secondCandidate);
  @*/
  
  
  
  /**
   * Determine the indivisble remainder after integer division by the transfer 
   * factor for surpluses.
   * 
   * @design This can all be done with integer arithmetic; no need to use
   * floating point numbers, which could introduce rounding errors.
   * 
   * @param fromCandidate Elected candidate from which to count the transfers
   * @param toCandidate Continuing candidate eligible to receive votes
   * 
   * @return The size of the quotient remainder 
   */
  /*@ requires state == COUNTING;
    @ requires isElected (fromCandidate); 
    @ requires toCandidate.getStatus() == election.tally.Candidate.CONTINUING;
    @ requires getSurplus(fromCandidate) < getTotalTransferableVotes(fromCandidate);
    @ requires 0 <= getTransferShortfall (fromCandidate);
    @ ensures \result ==
    @  getPotentialTransfers(fromCandidate, toCandidate.getCandidateID()) -
    @  getActualTransfers(fromCandidate, toCandidate);
    @*/
  protected /*@ pure spec_public @*/ int getTransferRemainder (
		  /*@ non_null @*/ Candidate fromCandidate, 
		  /*@ non_null @*/ Candidate toCandidate); 
  
  /**
   * Determine shortfall between sum of transfers rounded down and the size of
   * surplus.
   * 
   * @param fromCandidate
   *        Elected candidate from which to distribute surplus
   *        
   * @return The shortfall between the sum of the transfers and the size of surplus
   */
  /*@ protected normal_behavior
    @   requires state == COUNTING;
    @   requires isElected (fromCandidate); 
    @   requires getSurplus(fromCandidate) < getTotalTransferableVotes(fromCandidate);
    @*/
  protected /*@ pure spec_public @*/ int getTransferShortfall (
		  /*@ non_null @*/ Candidate fromCandidate);
    
  /*@ requires state == COUNTING;
    @ public pure model int numberTransferable (
    @   non_null Candidate fromCandidate) {
    @   int sum = 0;
    @   for (int i = 0; i <= totalCandidates; i++) {
    @     sum += getPotentialTransfers(
    @       fromCandidate, candidateList[i].getCandidateID());
    @   }
    @   return sum;
    @ } 
    @*/
  
  /**
   * Determine if a candidate ID belongs to a continuing candidate.
   * 
   * @param candidateID
   *        The ID of candidate for which to check the status
   *        
   * @return <code>true</code> if this candidate ID matches that of a
   *         caontinuing candidate
   */
  /*@ requires 0 < candidateID;
    @ ensures \result == (\exists int i;
    @   0 <= i && i < totalCandidates;
    @   candidateID == candidateList[i].getCandidateID() &&
    @   candidateList[i].getStatus() == Candidate.CONTINUING);
    */
  public /*@ pure @*/ boolean isContinuingCandidateID (int candidateID);

  /**
   * List each candidate ID in order by random number to show how lots would be have
   * been chosen.
   * 
   * @param candidate Candidate for which to get the order of
   * @return Order of this candidate for use when lots are chosen
   */
  /*@ requires state == COUNTING || state == FINISHED;
    @ protected pure model int getOrder(non_null Candidate candidate) {
    @   int order = 1;
    @   for (int c = 0; c <= totalCandidates; c++) {
    @     if (candidateList[c].isAfter(candidate)) {
    @       order++;
    @     }
    @   }
    @   return order;
    @ }
    @*/
  
  /**
   * Transfer votes from one candidate to another.
   * @param fromCandidate Elected or excluded candidate 
   * @param toCandidate Continuing candidate
   * @param numberOfVotes Number of votes to be transfered
   */
  /*@ requires fromCandidate.getStatus() != CandidateStatus.CONTINUING;
    @ requires toCandidate.getStatus() == CandidateStatus.CONTINUING;
    @ ensures countBallotsFor(fromCandidate.getCandidateID()) == 
    @   \old (countBallotsFor(fromCandidate.getCandidateID())) - numberOfVotes;
    @ ensures countBallotsFor(toCandidate.getCandidateID()) ==
    @   \old (countBallotsFor(toCandidate.getCandidateID())) + numberOfVotes;
    @*/
  public abstract void transferVotes(
		  final /*@ non_null @*/ Candidate fromCandidate,
		  final /*@ non_null @*/ Candidate toCandidate,
		  final int numberOfVotes);

  /**
   * Count the number of ballots in the pile for this candidate.
   * 
   * @param candidateID The internal identifier of this candidate
   * @return The number of ballots in this candidate's pile
   */
  public /*@ pure @*/ int countBallotsFor(int candidateID);
  
  /** Number of votes needed to guarantee election */
  //@ requires 0 <= seats;
  //@ ensures \result == 1 + (totalVotes / (seats + 1));
  public /*@ pure @*/ int getQuota();
  
  /** Number of candidates neither elected nor excluded from election 
   *  There must be at least one continuing candidate for each remaining seat
   *  @see requirement 11, section 4, item 4, page 16
   */
  /*@ ensures 0 <= \result;
    @ ensures \result == totalCandidates - (numberElected + numberEliminated);
    @*/
  public /*@ pure @*/ int getNumberContinuing();
}